package app

import (
	"fmt"

	_ "github.com/ffauzann/mini-e-wallet/docs" // docs is generated by Swag CLI, you have to import it.
	httpRoutes "github.com/ffauzann/mini-e-wallet/internal/delivery/http"
	"github.com/ffauzann/mini-e-wallet/internal/middleware"
	"github.com/ffauzann/mini-e-wallet/internal/repository"
	"github.com/ffauzann/mini-e-wallet/internal/service"
	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger" // echo-swagger middleware
)

type Server struct {
	Address string
	Port    Port
	Logger  Logger
}

type Port struct {
	HTTP uint32
}

func (c *Config) StartServer() {
	c.startHTTPServer()
}
func (c *Config) startHTTPServer() {
	e := echo.New()

	// Register middleware
	e.Use(middleware.Logger())
	e.Use(middleware.BodyDump())

	// Define mandatory instances
	dbIns := repository.NewDB(c.Database.SQL.DB, c.App)
	redisIns := repository.NewRedis(c.Cache.Redis.Client, c.App)
	svcIns := service.New(dbIns, redisIns, c.App)

	// Register all routes and swagger path
	httpRoutes.New(e, svcIns, c.App.Encryption.Key)
	e.GET("/swagger/*", echoSwagger.WrapHandler) // Should never be registered in production env

	// Start server
	addr := fmt.Sprintf("%s:%d", c.Server.Address, c.Server.Port.HTTP)
	e.Logger.Fatal(e.Start(addr))
	fmt.Printf("http started on %s\n", addr)
}
